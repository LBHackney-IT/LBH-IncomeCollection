# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build_and_check:
    docker:
      # specify the version you desire here
       - image: circleci/ruby:2.5.1-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rake db:create RAILS_ENV=test
      - run: bundle exec rake db:schema:load RAILS_ENV=test

      # run tests!
      - run:
          name: Run tests
          command: |
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec --format progress $TEST_FILES

  deploy_to_staging:
    docker:
       - image: circleci/ruby:2.5.1-node-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Deploy to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_STAGING_APP_NAME.git HEAD:refs/heads/master
            # sleep 5  # sleep for 5 seconds to wait for dynos
            # heroku restart

  deploy_to_production:
    docker:
       - image: circleci/ruby:2.5.1-node-browsers
    working_directory: ~/repo
    steps:
      - run: echo "DEPLOY TO PRODUCTION"

workflows:
  version: 2
  continuous_delivery:
    jobs:
      - build_and_check
      - deploy_to_staging:
          requires:
            - build_and_check
          filters:
            branches:
              only: master
      - permit_production_release:
          type: approval
          requires:
            - deploy_to_staging
      - deploy_to_production:
          requires:
            - permit_production_release
